#!/usr/bin/env python3

#
#Copyright (c) 2015-2021, NVIDIA CORPORATION.
#SPDX-License-Identifier: Apache-2.0

from __future__ import print_function
import argparse
import os
try:
    import queue
except ImportError:
    # py2
    import Queue as queue
import sys
import threading

PROJECTS = {
    'swift': {
        'root': '/vagrant/swift/doc/',
        'dir': ['../swift', 'saio'],
        'container': 'doc',
    },
    'swift-api-ref': {
        'root': '/vagrant/swift/api-ref/',
        'dir': [],
        'container': 'api-ref',
    },
    'swiftclient': {
        'root': '/vagrant/python-swiftclient/doc/',
        'dir': [],
        'container': 'swiftclient',
    }
}

parser = argparse.ArgumentParser()
parser.add_argument('-r', '--root', default=None,
                    help="the root of the doc tree")
parser.add_argument('--dir', action='append', default=[],
                    help="extra dirs to append, if relative path, "
                    "it's relative to the root")
parser.add_argument('--container', default=None,
                    help="the swift container into which the "
                    "compiled html will be uploaded")
parser.add_argument('project', nargs='?', default='swift',
                    choices=PROJECTS.keys(),
                    help="use defaults for pre-configured projects")


def iter_path_mtime(source_dir):
    for root, dirs, files in os.walk(source_dir):
        for filename in files:
            if filename.rsplit('.', 1)[-1] not in ('rst', 'py', 'inc', 'yaml'):
                continue
            full_path = os.path.join(root, filename)
            current_mtime = os.path.getmtime(full_path)
            yield full_path, current_mtime


def watch_changed_files(q, *source_dirs):
    last_changed_time = {}
    while True:
        full_pass_has_changes = False
        for source_dir in source_dirs:
            for path, mtime in iter_path_mtime(source_dir):
                if (path in last_changed_time and
                        last_changed_time[path] < mtime):
                    yield path
                    full_pass_has_changes = True
                    last_changed_time = {}
                last_changed_time[path] = mtime
        if not full_pass_has_changes:
            # sleep for one second (or till user hits enter...)
            try:
                q.get(timeout=1.0)
            except queue.Empty:
                pass
            else:
                yield 'User says path...'


def main():
    options = parser.parse_args()
    if options.root:
        root = options.root
        montior_paths = options.dir
        default_container = 'doc'
    else:
        root = PROJECTS[options.project]['root']
        montior_paths = PROJECTS[options.project]['dir'] + options.dir
        default_container = PROJECTS[options.project]['container']

    container = options.container or default_container
    source_dir = os.path.join(root, 'source')
    build_dir = os.path.join(root, 'build/html')
    extra_dirs = [os.path.join(root, path) for path in montior_paths]

    # intial build
    rv = os.system('vtox -e docs')
    if rv != 0:
        # bail on build fail
        return rv
    os.chdir(build_dir)
    os.system('swift post %s -r .r:*,.rlistings -m web-index:index.html' %
              container)
    print('uploading...')
    os.system('swift upload --changed %s . > /dev/null' % container)
    print('done...')
    os.system('swift stat -v %s index.html | grep URL' % container)
    # we're gunna let the user hit enter to rebuild immediately
    q = queue.Queue()

    def get_input():
        while True:
            if sys.version_info < (3,):
                q.put(raw_input())
            else:
                q.put(input())
    continue_thread = threading.Thread(target=get_input)
    continue_thread.daemon = True
    continue_thread.start()
    for filename in watch_changed_files(q, source_dir, *extra_dirs):
        print('%s has CHANGED!' % filename)
        print('rebuilding...')
        os.system('tox -e docs')
        print('uploading...')
        os.system('swift upload --changed %s . > /dev/null' % container)
        print('done...')
        os.system('swift stat -v %s index.html | grep URL' % container)


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print('quit.')
